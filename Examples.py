

def get_paths_start_process_contains_00header(neo_driver_attack_graph, neo_driver_benign_graph, paths_attack_list, paths_benign_list):
    """ Get the paths starting from the process, 00header, which is a process present in both graphs and not part of the attack"""

    paths_attack = neo_driver_attack_graph.return_paths(neo_driver_attack_graph.get_paths_all_with_starting_process_containing, "00-header")
    paths_benign = neo_driver_benign_graph.return_paths(neo_driver_benign_graph.get_paths_all_with_starting_process_containing, "00-header")
    for i in range(len(paths_attack)):
        paths_attack_list.append(paths_attack[i])
    for i in range(len(paths_benign)):
        paths_benign_list.append(paths_benign[i])

    return paths_attack_list, paths_benign_list

def get_paths_start_file_contains_packet_sniffer(neo_driver_attack_graph, neo_driver_benign_graph, paths_attack_list, paths_benign_list):
    """ Get the paths starting from the file, packet_sniffer.py, which is a file that contains malicious code in the attack graph and benign code in the benign graph"""

    paths_attack = neo_driver_attack_graph.return_paths(neo_driver_attack_graph.get_paths_all_artifact_files_containing, "/home/ted01/packet_sniffer.py")
    paths_benign = neo_driver_benign_graph.return_paths(neo_driver_benign_graph.get_paths_all_artifact_files_containing, "/home/ted01/packet_sniffer.py")
    for i in range(len(paths_attack)):
        paths_attack_list.append(paths_attack[i])
    for i in range(len(paths_benign)):
        paths_benign_list.append(paths_benign[i])

    return paths_attack_list, paths_benign_list

def get_paths_start_process_contains_packet_sniffer(neo_driver_attack_graph, neo_driver_benign_graph, paths_attack_list, paths_benign_list):
    """ Get the paths starting from any process which has packet_sniffer.py in the command line name. packet_sniffer.py is a file that contains malicious code in the attack graph and benign code in the benign graph"""

    paths_attack = neo_driver_attack_graph.return_paths(neo_driver_attack_graph.get_paths_all_with_starting_process_containing, "packet_sniffer.py")
    paths_benign = neo_driver_benign_graph.return_paths(neo_driver_benign_graph.get_paths_all_with_starting_process_containing, "packet_sniffer.py")
    for i in range(len(paths_attack)):
        paths_attack_list.append(paths_attack[i])
    for i in range(len(paths_benign)):
        paths_benign_list.append(paths_benign[i])

    return paths_attack_list, paths_benign_list

def get_paths_start_socket_contains_10_9_address(neo_driver_attack_graph, neo_driver_benign_graph, paths_attack_list, paths_benign_list):
    """ Get the paths starting from all network sockets which have 10.9. in the remote address. This is the subnet which the malicious python script used to communicate with the attack's PC"""

    paths_attack = neo_driver_attack_graph.return_paths(neo_driver_attack_graph.get_paths_all_from_network_socket_start_containing, "10.9.")
    paths_benign = neo_driver_benign_graph.return_paths(neo_driver_benign_graph.get_paths_all_from_network_socket_start_containing, "10.9.")
    for i in range(len(paths_attack)):
        paths_attack_list.append(paths_attack[i])
    for i in range(len(paths_benign)):
        paths_benign_list.append(paths_benign[i])

    return paths_attack_list, paths_benign_list