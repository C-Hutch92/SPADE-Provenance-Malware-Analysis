from neo4j import GraphDatabase

class MyDriver:
    def __init__(self, connection_string, username="neo4j", password="s"):
        """
        Setup a connection to the Neo4j graph database server.
        :param connection_string: URL to the Neo4j Graph database server
        :param username: Username
        :param password: Password
        """
        self.uri = connection_string
        self.driver = GraphDatabase.driver(self.uri, auth=(username, password))

    def return_paths(self, query, *args):
        """
        return the paths from a given query
        :param query: A path-compatible neo4j query from the static methods within this class
        :param args:  query arguments
        :return: returns the paths associated with the specific query
        """
        return_paths = []
        with self.driver.session() as session:
            paths = session.read_transaction(query, *args[:])
            i = 0
            for path in paths:
                i = i + 1
                r = 0
                #print("Path " + str(i))
                for rel in path[0].relationships:
                    #print(path[0].nodes[r])
                    #print(rel._properties)
                    r = r + 1
                #print(path[0].nodes[r])
                return_paths.append(path[0])
                #print("-------------------------------------------")
            return return_paths

    def return_relationships(self, query, *args):
        """
        return the relationships from a given query
        :param query: A relationship-compatible neo4j query from the static methods within this class
        :param args: query arguments
        :return: returns the paths associated with the specific query
        """
        with self.driver.session() as session:
            relationships = session.read_transaction(query, *args[:])
            return relationships

    def return_nodes(self, query, *args):
        """
        return the nodes from  given query
        :param query: A node-compatible neo4j query from the static methods within this class
        :param args: query arguments
        :return: returns the paths associated with the specific query
        """
        with self.driver.session() as session:
            nodes = session.read_transaction(query, *args[:])
            return nodes

    @staticmethod
    def get_paths_all_with_start_artifact_file(tx, filename):
        result = tx.run("MATCH (n:VERTEX {`path`: $filename, `type`: 'Artifact', `subtype`: 'file'}), (m:VERTEX {`type`:'END_NODE'}) \
                                CALL apoc.algo.allSimplePaths(n, m, '>', 8)\
                                YIELD path \
                                RETURN path", filename=filename)
        return result.values()

    @staticmethod
    def get_paths_all_artifact_files_containing(tx, filename):
        result = tx.run("MATCH (n:VERTEX {`path`: $filename, `type`: 'Artifact', `subtype`: 'file'}), (m:VERTEX {`type`:'END_NODE'}) \
                                CALL apoc.algo.allSimplePaths(n, m, '>', 8)\
                                YIELD path \
                                RETURN path", filename=filename)
        return result.values()

    @staticmethod
    def get_paths_all_with_starting_process_containing(tx, filename):
        result = tx.run("MATCH (m:VERTEX {`type`:'END_NODE'}), (n:VERTEX {`type`:'Process'}) \
                        WHERE n.`command line` contains $filename \
                        CALL apoc.algo.allSimplePaths(n, m, '>', 8)\
                        YIELD path\
                        RETURN path", filename=filename)

        return result.values()

    @staticmethod
    def get_paths_all_from_network_socket_start_containing(tx, remote_address):
        result = tx.run("MATCH (m:VERTEX {`type`:'END_NODE'}), (n:VERTEX {`type`:'Artifact', `subtype`:'network socket'}) \
                        where n.`remote address` contains $remote_address \
                        CALL apoc.algo.allSimplePaths(n, m, '>', 8)\
                        YIELD path\
                        RETURN path", remote_address=remote_address)

        return result.values()

    @staticmethod
    def get_single_path_with_starting_process_containing(tx, filename):
        result = tx.run("MATCH (m:VERTEX {`type`:'END_NODE'}), (n:VERTEX {`type`:'Process'}) \
                        WHERE n.`command line` contains $filename \
                        CALL apoc.algo.allSimplePaths(n, m, '>', 8)\
                        YIELD path\
                        RETURN path \
                        ORDER BY length(path) DESC \
                        SKIP 5000 \
                        LIMIT 1", filename=filename)

        return result.values()

    @staticmethod
    def get_relationships_all_from_node(tx, nodeid):
        return tx.run("match (n:VERTEX)-[r:EDGE]-(m:VERTEX) WHERE ID(n)=$id and r.`type` <> 'END_REL' return r",
                      id=nodeid).values()

    @staticmethod
    def get_node_from_id(tx, id):
        return tx.run("MATCH (n:VERTEX) WHERE id(n)=$id RETURN n", id=id)

    def close(self):
        self.driver.close()
