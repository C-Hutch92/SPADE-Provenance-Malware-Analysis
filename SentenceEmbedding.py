from gensim.test.utils import common_texts
from gensim.models.doc2vec import Doc2Vec, TaggedDocument

def Embedding_Name_Process(node):
    name = node._properties.get('command line')
    if not name:
        name = node._properties.get('name')
        if not name:
            name = node._properties.get('pid')
            if not name:
                name = 'Unidentified Process'
    return name


def Embedding_Name_Artifact(node):
    if node._properties.get('subtype') == 'file':
        name = node._properties.get('path')
    else:
        if node._properties.get('subtype') == 'network socket':
            name = node._properties.get('local address') + ":" + node._properties.get(
                'local port') + "::" + node._properties.get('remote address') + ":" + node._properties.get(
                'remote port')
        else:
            name = 'Unidentified Artifact'
    return name

def Embeddeding_Name_Node(node):
    if node._properties.get('type') == 'Artifact':
        return Embedding_Name_Artifact(node)
    else:
        if node._properties.get('type') == 'Process':
            return Embedding_Name_Process(node)
        else:
            return "Unidentified Node"

def create_sentence_from_path(path):
    """
    create a sentence from the path provided in the form entity - relationship - entity - relationship - etc.
    e.g. "bin/bash  ./packetsniffer.py"  used "/home/ted01/packetsniffer.py"  WasGeneratedBy "chmod777 packetsniffer.py"
    (without quotation marks)
    :rtype: A path to be converted to a sentence
    :return: A list of words forming a single sentence
    """
    sentence = []
    for rel_indx, rel in enumerate(path.relationships):
        sentence.append(Embeddeding_Name_Node(path.nodes[rel_indx]))
        if rel_indx != len(path.relationships) - 1:
            sentence.append(rel._properties['type'])
    return sentence

class Model:
    def train(self, Sentences):
        documents = [TaggedDocument(doc, [i]) for i, doc in enumerate(Sentences)]
        self.model = Doc2Vec(documents, vector_size=2, window=2, min_count=1, workers=4, dm=1)

    def infer(self, sentence):
        vector = self.model.infer_vector(sentence)
        return vector