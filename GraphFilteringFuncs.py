from neo4j import GraphDatabase

def check_path_timings(paths):
    """
    Check the path timings, if the relationships in the graph are not in chronological order, then discard them.
    :param paths: paths to check
    :return: A list of time-compatible paths
    """
    good_paths = []
    for path in paths:
        bool_bad_path = False
        for rel_indx, rel in enumerate(path.relationships):
            if rel_indx != 0:
                if float(rel._properties['time']) < float(path.relationships[rel_indx - 1]._properties['time']):
                    bool_bad_path = True
        if bool_bad_path == False:
            good_paths.append(path)
    return good_paths


def delete_end_node_path(paths):
    """
    Delete the single entity - END_REL - END_NODE path, this will be in all of the queries and contains no information
    :param paths: a list of paths where one path contains the single entity - END_REL - END_NODE path.
    :return: The other paths.
    """
    good_paths = []
    bad_paths = 0
    for path in paths:
        bool_bad_path = False
        if len(path.relationships) == 1:
            bool_bad_path = True
        if bool_bad_path == False:
            good_paths.append(path)
    return good_paths


def min_max_times_from_relationships(relationships):
    """
    Mostly used for debugging purposes, it just prints the max and min relationship times in a list of relationships
    :param relationships: list of relationships
    :return: the min and max time of all relationships in the list.
    """
    relationship_times = []
    for rel in relationships:
        relationship_times.append(float(rel[0]._properties['time']))
    return max(relationship_times), min(relationship_times)